set serveroutput on;

-- EJERCICIO 1
CREATE OR REPLACE PROCEDURE MostrarEmpleados IS
    CURSOR cursorEmple IS SELECT apellido, fecha_alta FROM EMPLE ORDER BY apellido;
    apellido cursorEmple%ROWTYPE;
    fechaNac cursorEmple%ROWTYPE;
BEGIN
    OPEN cursorEmple;
    FETCH cursorEmple INTO apellido, fechaNac;
    WHILE cursorEmple%FOUND LOOP
        DBMS_OUTPUT.PUT_LINE(apellido || ' ' || fechaNac);
        FETCH cursorEmple INTO apellido, fechaNac;
    END LOOP;
    CLOSE cursorEmple;
END;
/

-- EJERCICIO 2

CREATE OR REPLACE PROCEDURE MostrarDepartamentos IS
    CURSOR cursorDep IS SELECT DNOMBRE, COUNT(EMP.DEPT_NO) AS NUMERO_EMPLEADOS FROM DEPART DEP LEFT JOIN EMPLE EMP ON DEP.DEPT_NO = EMP.DEPT_NO GROUP BY DNOMBRE;
    nombre cursorDep%ROWTYPE;
    numEmpleados cursorDep%ROWTYPE;
BEGIN
    OPEN cursorDep;
    FETCH cursorDep INTO nombre, numEmpleados;
    WHILE cursorDep%FOUND LOOP
        DBMS_OUTPUT.PUT_LINE(nombre || ' ---- ' || numEmpleados);
        FETCH cursorDep INTO nombre, numEmpleados;
    END LOOP;
    CLOSE cursorDep;
END;
/

-- EJERCICIO 3
DECLARE
    CURSOR cursorEmple IS SELECT APELLIDO, SALARIO FROM EMPLE ORDER BY SALARIO DESC FETCH FIRST 5 ROWS ONLY;
    apellido cursorEmple%ROWTYPE;
    salario cursorEmple%ROWTYPE;
BEGIN
    OPEN cursorEmple;
    FETCH cursorEmple INTO apellido, salario;
    WHILE cursorEmple%FOUND LOOP
        DBMS_OUTPUT.PUT_LINE(apellido || ' ---- ' || salario);
        FETCH cursorEmple INTO apellido, salario;
    END LOOP;
    CLOSE cursorEmple;
END;

-- EJERCICIO 4
DECLARE
    CURSOR CURSOREMPLE IS SELECT OFICIO, APELLIDO, SALARIO FROM EMPLE ORDER BY OFICIO, SALARIO ASC;
    P_OFICIO EMPLE.OFICIO%TYPE;
    P_APELLIDO EMPLE.APELLIDO%TYPE;
    P_SALARIO EMPLE.SALARIO%TYPE;
    V_CURRENTOFICIO EMPLE.OFICIO%TYPE := NULL;
    V_CONTADOR NUMBER := 0;
BEGIN
    OPEN CURSOREMPLE;
    FETCH CURSOREMPLE INTO P_OFICIO, P_APELLIDO, P_SALARIO;

    WHILE CURSOREMPLE%FOUND LOOP
        IF V_CURRENTOFICIO IS NULL OR V_CURRENTOFICIO != P_OFICIO THEN
            -- Nuevo oficio, reiniciar contador
            V_CURRENTOFICIO := P_OFICIO;
            V_CONTADOR := 0;
        END IF;

        IF V_CONTADOR < 2 THEN
            DBMS_OUTPUT.PUT_LINE(P_OFICIO || ' ---- ' || P_APELLIDO || ' ---- ' || P_SALARIO);
            V_CONTADOR := V_CONTADOR + 1;
        END IF;

        FETCH CURSOREMPLE INTO P_OFICIO, P_APELLIDO, P_SALARIO;
    END LOOP;

    CLOSE CURSOREMPLE;
END;
/



-- EJERCICIO 5

CREATE OR REPLACE PROCEDURE EJERCICIO5(NOMBREDEP VARCHAR2, LOCALIDAD VARCHAR2) AS
    NUMDEPART NUMBER(2);
BEGIN
    SELECT DEPT_NO INTO NUMDEPART FROM DEPART ORDER BY DEPT_NO DESC FETCH FIRST 1 ROW ONLY;
    INSERT INTO DEPART (DEPT_NO, DNOMBRE, LOC) VALUES(NUMDEPART, NOMBREDEP, LOCALIDAD);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR');
END;
/

-- EJERCICIO 6

CREATE OR REPLACE PROCEDURE EJERCICIO6(NUMDEP IN NUMBER, IMPORTEINCREMENTO IN NUMBER, PORCENTAJEINCREMENTO IN NUMBER) AS
    CURSOR SUBIDA IS SELECT EMP_NO, SALARIO, COMISION FROM EMPLE WHERE DEPT_NO = NUMDEP;
    AUXEMPNO EMPLE.EMP_NO%TYPE;
    SALARIO EMPLE.SALARIO%TYPE;
    AUXCOMISION EMPLE.COMISION%TYPE;
    PORCENTAJEREAL NUMBER;
BEGIN
    PORCENTAJEREAL := PORCENTAJEINCREMENTO / 100;

    OPEN SUBIDA;
    FETCH SUBIDA INTO AUXEMPNO, SALARIO, AUXCOMISION;
    WHILE SUBIDA%FOUND LOOP
        IF IMPORTEINCREMENTO > (PORCENTAJEREAL * SALARIO) THEN
            UPDATE EMPLE SET SALARIO = SALARIO + IMPORTEINCREMENTO WHERE DEPT_NO = NUMDEP;
        END IF;

        IF IMPORTEINCREMENTO < (PORCENTAJEREAL * SALARIO) THEN
            UPDATE EMPLE SET SALARIO = SALARIO + (SALARIO * PORCENTAJEREAL) WHERE DEPT_NO = NUMDEP;
        END IF;

        IF IMPORTEINCREMENTO = (PORCENTAJEREAL * SALARIO) THEN
            UPDATE EMPLE SET SALARIO = SALARIO + (SALARIO * PORCENTAJEREAL) WHERE DEPT_NO = NUMDEP;
        END IF;
        FETCH SUBIDA INTO AUXEMPNO, SALARIO, AUXCOMISION;
    END LOOP;
END;
/

-- EJERCICIO 7

CREATE OR REPLACE PROCEDURE EJERCICIO7
AS
DECLARE
    CURSOR C_SALARIO IS SELECT EMP_NO, OFICIO, SALARIO FROM EMP46;
    V_EMPLOYEE C_SALARIO%ROWTYPE;
    V_AVGSALARY NUMBER(9,2);
BEGIN
    OPEN C_SALARIO;
    FETCH C_SALARIO INTO V_EMPLOYEE;
    WHILE C_SALARIO%FOUND LOOP
        SELECT AVG(SALARIO) INTO V_AVGSALARY FROM EMPLE WHERE OFICIO = V_EMPLOYEE.OFICIO;
        IF V_EMPLOYEE.SALARIO < V_AVGSALARY THEN
            UPDATE EMPLE SET SALARIO = SALARIO + (SALARIO * 0.5) WHERE EMP_NO = V_EMPLOYEE.EMP_NO;
        END IF;
        FETCH C_SALARIO INTO V_EMPLOYEE;
    END LOOP;
END;
/

-- EJERCICIO 8
DECLARE
    CURSOR C_EMP IS SELECT APELLIDO, DEPT_NO, OFICIO, SALARIO, COMISION, FECHA_ALT FROM EMPLE;
    V_EMPLOYEE C_EMP%ROWTYPE;
    P_TOTAL NUMBER;
    P_TRIENIOS NUMBER;
BEGIN
    P_TOTAL := 0;
    OPEN C_EMP;
    FETCH C_EMP INTO V_EMPLOYEE;
    WHILE C_EMP%FOUND LOOP
        IF V_EMPLOYEE.COMISION IS NULL THEN
            V_EMPLOYEE.COMISION := 0;
        END IF;
        P_TRIENIOS := CEIL(((EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM V_EMPLOYEE.FECHA_ALT)) / 3) * 100) / 100;
        DBMS_OUTPUT.PUT_LINE(P_TRIENIOS);
        DBMS_OUTPUT.PUT_LINE('******************************************************');
        DBMS_OUTPUT.PUT_LINE('Liquidación Del Empleado                          :('|| V_EMPLOYEE.APELLIDO ||')');
        DBMS_OUTPUT.PUT_LINE('Dpto                                              :('|| V_EMPLOYEE.DEPT_NO ||')');
        DBMS_OUTPUT.PUT_LINE('Oficio                                            :('|| V_EMPLOYEE.OFICIO ||')');
        DBMS_OUTPUT.PUT_LINE('Salario                                           :('|| V_EMPLOYEE.SALARIO ||')');
        DBMS_OUTPUT.PUT_LINE('Trienios (50€/tri)                                :('|| P_TRIENIOS ||')');
        DBMS_OUTPUT.PUT_LINE('Comp. responsabilidad                             :('|| 100 ||')');
        DBMS_OUTPUT.PUT_LINE('Comisión                                          :('|| V_EMPLOYEE.COMISION ||')');
        DBMS_OUTPUT.PUT_LINE('******************************************************');
        P_TOTAL := V_EMPLOYEE.SALARIO + (P_TRIENIOS*50) + 100 + V_EMPLOYEE.COMISION;
        DBMS_OUTPUT.PUT_LINE('Total                                             :('|| P_TOTAL ||')');
        DBMS_OUTPUT.PUT_LINE('******************************************************');
        FETCH C_EMP INTO V_EMPLOYEE;
    END LOOP;
END;
/


-- EJERCICIO 9
CREATE TABLE T_LIQUIDACION(
    ID NUMBER GENERATED ALWAYS AS IDENTITY START WITH 1 INCREMENT BY 1,
    APELLIDO VARCHAR2(200),
    DEPARTAMENTO NUMBER(5),
    OFICIO VARCHAR2(200),
    SALARIO NUMBER(8,2),
    TRIENIOS NUMBER(4,2),
    COMP_RESPONSABILIDAD NUMBER,
    COMISION NUMBER(8,2),
    TOTAL NUMBER(8,2)
);


DECLARE
    CURSOR C_EMP IS SELECT APELLIDO, DEPT_NO, OFICIO, SALARIO, COMISION, FECHA_ALT FROM EMPLE;
    V_EMPLOYEE C_EMP%ROWTYPE;
    P_TOTAL NUMBER;
    P_TRIENIOS NUMBER;
BEGIN
    P_TOTAL := 0;
    OPEN C_EMP;
    FETCH C_EMP INTO V_EMPLOYEE;
    WHILE C_EMP%FOUND LOOP
        IF V_EMPLOYEE.COMISION IS NULL THEN
            V_EMPLOYEE.COMISION := 0;
        END IF;
        P_TRIENIOS := CEIL(((EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM V_EMPLOYEE.FECHA_ALT)) / 3) * 100) / 100; /* THESE 100 ARE USED TO GET THE AMOUNT OF DECIMALS */
        P_TOTAL := V_EMPLOYEE.SALARIO + (P_TRIENIOS*50) + 100 + V_EMPLOYEE.COMISION; /* THE 100 HERE IS FOR THE COMP_RESPONSABILIDAD WHICH I'VE GOT NO IDEA WHERE IT COMES FROM */
        INSERT INTO T_LIQUIDACION (APELLIDO, DEPARTAMENTO, OFICIO, SALARIO, TRIENIOS, COMP_RESPONSABILIDAD, COMISION, TOTAL)
            VALUES (
                V_EMPLOYEE.APELLIDO,
                V_EMPLOYEE.DEPT_NO,
                V_EMPLOYEE.OFICIO,
                V_EMPLOYEE.SALARIO,
                P_TRIENIOS,
                100,
                V_EMPLOYEE.COMISION,
                P_TOTAL
            );
        FETCH C_EMP INTO V_EMPLOYEE;
    END LOOP;
END;
/

-- EJERCICIO 10
CREATE OR REPLACE PROCEDURE NUEVO_PEDIDO(
                            I_PEDIDO_NO IN NUMBER,
                            I_PRODUCTO_NO IN NUMBER,
                            I_CLIENTE_NO IN NUMBER,
                            I_UNIDADES IN NUMBER,
                            I_FECHA_PEDIDO IN DATE DEFAULT SYSDATE)
AS
    V_PRECIOACTUAL PRODUCTOS08.PRECIO_ACTUAL%TYPE;
BEGIN



    SELECT PRECIO_ACTUAL INTO V_PRECIOACTUAL FROM PRODUCTOS08 P08 WHERE P08.PRODUCTO_NO = I_PRODUCTO_NO;


    INSERT INTO NUEVO_PEDIDO(PEDIDO_NO, PRODUCTO_NO, CLIENTE_NO, UNIDADES, FECHA_PEDIDO)
        VALUES(I_PEDIDO_NO, I_PRODUCTO_NO, I_CLIENTE_NO, I_UNIDADES, I_FECHA_PEDIDO);


    UPDATE CLIENTES08 C08 SET C08.DEBE = C08.DEBE + (I_UNIDADES * V_PRECIO_ACTUAL) WHERE C08.CLIENTE_NO = I_CLIENTE_NO;


    UPDATE PRODUCTOS08 P08 SET P08.STOCK_DISPONIBLE = P08.STOCK_DISPONIBLE - I_UNIDADES;


    UPDATE EMPLE EMP SET COMISION = COMISION + ( ( V_PRECIOACTUAL * I_UNIDADES ) * 0.05) WHERE EMP.EMP_NO = (SELECT C08.VENDEDOR_NO FROM CLIENTES08 C08 WHERE C08.CLIENTE_NO = I_CLIENTE_NO);

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('BLAZE');
END;
/
